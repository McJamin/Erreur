pygame.init()


class Monster(pygame.sprite.Sprite):

    def __int__(self):
        super().__init__()
        self.health = 100
        self.max_health = 100
        self.attack = 5
        self.image = pygame.image.load('assets/mummy.png')
        self.rect = self.image.get_rect()

class Projectile(pygame.sprite.Sprite):

    # definir le constructeur de la classe
    def __init__(self, player):
        super().__init__()
        self.velocity = 5
        self.player = player
        self.image = pygame.image.load('assets/projectile.png')
        self.image = pygame.transform.scale(self.image, (50, 50))
        self.rect = self.image.get_rect()
        self.rect.x = player.rect.x + 120
        self.rect.y = player.rect.y + 90
        self.origin_image = self.image
        self.angle = 0


    def rotate(self):
        #faire tourner le projectile
        self.angle += 8
        self.image = pygame.transform.rotozoom(self.origin_image, self.angle, 1)
        self.rect = self.image.get_rect(center=self.rect.center)

    def remove(self):
        self.player.all_projectiles.remove(self)


    def move(self):
        self.rect.x += self.velocity
        self.rotate()

        #ciondition pour voir sile projectile n'est plus sur l'ecran
        if self.rect.x > 1080:
            #le supprimer
            self.remove()
#genereer la fenetre
pygame.display.set_caption("Le jeu a Gloubik")
screen = pygame.display.set_mode((1080, 720))

running = True

# arriere plan
background = pygame.image.load('assets/bg.jpg')

#charger le jeu
game = Game()

#boucle tant que la condition est vrai

while running:

    #appliquer arriere plan
    screen.blit(background, (0, -200))

   #recupereer les projectiles du joueur
    for projectile in game.player.all_projectiles:
        projectile.move()

    #appliquer le joueur
    screen.blit(game.player.image, game.player.rect)

    #applique l'ensemblme des image du groupe de projectiles
    game.player.all_projectiles.draw(screen)

    #appliquer les monstres
    game.all_monsters.draw(screen)

    #verifier si le joueur va a gauche ou droite
    if game.pressed.get(pygame.K_RIGHT) and game.player.rect.x + game.player.rect.width < screen.get_width():
        game.player.move_right()
    elif game.pressed.get(pygame.K_LEFT) and game.player.rect.x > 0:
        game.player.move_left()

class Player(pygame.sprite.Sprite):

    def __init__(self):
        super().__init__()
        self.health = 100
        self.max_health = 100
        self.attack = 10
        self.velocity = 5
        self.all_projectiles = pygame.sprite.Group()
        self.image = pygame.image.load('assets/player.png')
        self.rect = self.image.get_rect()
        self.rect.x = 400
        self.rect.y = 500

    def launch_projectile(self):
        #creer une new instance de projectile
        self.all_projectiles.add(Projectile(self))


    def move_right(self):
        self.rect.x += self.velocity

    def move_left(self):
        self.rect.x -= self.velocity


class Game:

    def __init__(self):
        #generer notre joueur
        self.player = Player()
        #gfroupe de monsters
        self.all_monsters = pygame.sprite.Group()
        self.pressed = {}
        self.spawn_monster()

    def spawn_monster(self):
        monster = Monster()
        self.all_monsters.add(monster)

    #mettre a jour fenetre
    pygame.display.flip()

    #si le joueur ferme la fenetre
    for event in pygame.event.get():
        #evenement = fermeture de fenetre
        if event.type == pygame.QUIT:
            running = False
            pygame.quit()
            print("fermeture du jeu")
            #detecter si un joueur lache une touche
        elif event.type == pygame.KEYDOWN:
            game.pressed[event.key] = True

            if event.key == pygame.K_SPACE:
                game.player.launch_projectile()

        elif event.type == pygame. KEYUP:
            game.pressed[event.key] = False
